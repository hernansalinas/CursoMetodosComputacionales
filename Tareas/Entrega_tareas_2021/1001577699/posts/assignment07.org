#+TITLE: Assignment07
#+SETUPFILE: ~/Desktop/Metodos_Computacionales_taller/Tareas/Entrega_tareas_2021/1001577699/org-html-themes/org/theme-readtheorg-local.setup

#+begin_src ipython :session asession :results raw drawer
%config InlineBackend.figure_format = 'svg'

import numpy as np
import matplotlib.pyplot as plt
import scipy.integrate as integrate
#+end_src

#+RESULTS:
:results:
# Out[9]:
:end:

* Setting up the problem
The magnetic vector potential for a loop of radius $a$ carrying a steady current
$I$ at a point a distance $r$ from the centre of the loop and with an angle
$\theta$ is given by the following expression:
\[ A_\varphi(r,\theta) = \frac{\mu_0}{4\pi} \frac{4Ia}{\sqrt{a^2 + r^2 + 2ar\sin\theta}} \left( \frac{(2 - k^2) K(k) - 2E(k))}{k^2} \right) \]
where
\begin{gather*}
K(k) = \int_0^{\pi/2} \frac{d\varphi}{\sqrt{1 - k^2 \sin^2 \varphi}},\\
E(k) = \int_0^{\pi/2} \sqrt{1 - k^2 \sin^2 \varphi}\,d\varphi,
\end{gather*}
and
\[ k^2 = \frac{4ar\sin\theta}{a^2 + r^2 + 2ar\sin\theta} \]

We may define a function whose input is a number $\theta$, and whose
value is $k^2$. This value could then be used to compute the elliptic integrals
seen above, and then the whole thing could be replaced in the function
$\left.A_\varphi\right|_{r=1.1} : [0,\pi/2] \to \mathbb{R}$.
#+begin_src ipython :session asession :results raw drawer
def k_sr(r, theta, a) :
    num = 4*a*r*np.sin(theta)
    den = a**2 + r**2 + 2*a*r*np.sin(theta)
    return num/den
#+end_src

#+RESULTS:
:results:
# Out[2]:
:end:

We can visualise this function over the domain on which we're integrating it, as
usual:
#+begin_src ipython :session asession :results raw drawer :exports both
theta = np.linspace(0, np.pi/2, 100)

plt.plot(theta, k_sr(1.1, theta, 1), 'k-')
plt.xlabel('angle')
plt.ylabel('k²')
plt.grid()
plt.show()
#+end_src

#+RESULTS:
:results:
# Out[5]:
[[file:./obipy-resources/pX31uY.svg]]
:end:

Now that we have the number $k$, we may proceed with the computation of the
elliptic integrals $K(k)$ and $E(k)$
#+begin_src ipython :session asession :results raw drawer
def K(r, theta, a):
    _k = k_sr(r, theta, a)
    # Generate an expression for the integrand
    func = lambda phi: 1/np.sqrt(1 - _k*np.sin(phi)**2)
    # Compute the integral
    K, eps = integrate.quad(func, 0, np.pi/2)
    return K

def E(r, theta, a):
    _k = k_sr(r, theta, a)
    # Generate an expression for the integrand
    func = lambda phi: np.sqrt(1 - _k*np.sin(phi)**2)
    # Compute the integral
    K, eps = integrate.quad(func, 0, np.pi/2)
    return K
#+end_src

#+RESULTS:
:results:
# Out[11]:
:end:
We can thereupon define a function that yeields the norm of the magnetic vector
potential:
#+begin_src ipython :session asession :results raw drawer
K, E = np.vectorize(K), np.vectorize(E)
def vector_potential(r, theta, I=3, a=1):
    _K = K(r, theta, a)
    _E = E(r, theta, a)
    _k = k_sr(r, theta, a)

    potential = 4*I*a/np.sqrt(a**2 + r**2 + 2*a*r*np.sin(theta))
    potential *= (_K*(2 - _k) - 2*_E)/_k
    return potential
#+end_src

#+RESULTS:
:results:
# Out[17]:
:end:

* Plot the graph of the single-variable function $A_\varphi(1.1,\theta)$.
The required graph is then:
#+begin_src ipython :session asession :results raw drawer :exports both
thetas = np.linspace(0.1, np.pi, 200)
potential = vector_potential(1.1, thetas)

plt.plot(thetas, potential, 'k-')
plt.xlabel('Polar angle')
plt.ylabel('Vector potential at r = 1.1')
plt.grid()
plt.show()
#+end_src

#+RESULTS:
:results:
# Out[23]:
[[file:./obipy-resources/4D3XjU.svg]]
:end:
* Plot the graph of the single-variable function $A_\varphi(r,\pi/3)$.
#+begin_src ipython :session asession :results raw drawer :exports both
distances = np.linspace(1, 25, 200)
potential = vector_potential(distances, np.pi/3)

plt.plot(thetas, potential, 'k-')
plt.xlabel('Polar angle')
plt.ylabel('Vector potential at an angle of 60°')
plt.grid()
plt.show()
#+end_src

#+RESULTS:
:results:
# Out[22]:
[[file:./obipy-resources/yRstWn.svg]]
:end:
